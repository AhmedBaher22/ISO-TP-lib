Index: iso_tp_layer/recv_request/RecvRequest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from math import ceil\r\nfrom typing import Callable\r\nfrom bitarray import bitarray\r\nfrom iso_tp_layer.Exceptions import TimeoutException\r\nfrom iso_tp_layer.frames import FrameMessage\r\nfrom Address import Address\r\nimport time\r\nfrom iso_tp_layer.frames.ErrorFrameMessage import ErrorFrameMessage\r\nfrom iso_tp_layer.frames.FlowControlFrameMessage import FlowControlFrameMessage\r\nfrom iso_tp_layer.frames.FlowStatus import FlowStatus\r\nfrom iso_tp_layer.recv_request.InitialState import InitialState\r\n\r\n\r\nclass RecvRequest:\r\n    \"\"\"\r\n    Represents a recv_request containing a bitarray message and a state.\r\n    \"\"\"\r\n    def __init__(self, address: Address, block_size, timeout, stmin, on_success: Callable, on_error: Callable, send_frame: Callable):\r\n        self._address = address\r\n        self._max_block_size = block_size\r\n        self._timeout = timeout  # in milliseconds\r\n        self._stmin = stmin  # in milliseconds\r\n        self.on_success = on_success\r\n        self.on_error = on_error\r\n        self._send_frame = send_frame\r\n        self._message = bitarray()  # Initialize with an empty bitarray\r\n        self._state = InitialState()  # Start with the initial state\r\n        self._expected_sequence_number = 1\r\n        self._current_block_size = 0\r\n        self._data_length = 0\r\n        self._last_received_time = time.time()  # Store the time of last received message\r\n        self._flow_status = FlowStatus.Continue\r\n\r\n    def set_flow_status(self, status: FlowStatus):\r\n        self._flow_status = status\r\n\r\n    def get_address(self):\r\n        return self._address\r\n\r\n    def send_flow_control_frame(self):\r\n        flow_control_frame = FlowControlFrameMessage(flowStatus=self._flow_status,\r\n                                                     blockSize=self._max_block_size,\r\n                                                     separationTime=self._stmin)\r\n        self._send_frame(self._address, flow_control_frame)\r\n\r\n    def send_error_frame(self):\r\n        error_frame = ErrorFrameMessage(serviceId=0, errorCode=0)\r\n        self._send_frame(self._address, error_frame)\r\n\r\n    def set_max_block_size(self, max_block_size):\r\n        self._max_block_size = max_block_size\r\n\r\n    def set_current_block_size(self, current_block_size):\r\n        self._current_block_size = current_block_size\r\n\r\n    def get_data_length(self):\r\n        return self._data_length\r\n\r\n    def get_current_data_length(self):\r\n        return ceil(len(self._message) / 8)  # Convert bits to bytes\r\n    \r\n    def set_data_length(self, data_length):\r\n        self._data_length = data_length\r\n    \r\n    def get_current_block_size(self):\r\n        return self._current_block_size\r\n\r\n    def get_max_block_size(self):\r\n        return self._max_block_size\r\n\r\n    def set_expected_sequence_number(self, number):\r\n        self._expected_sequence_number = number\r\n\r\n\r\n    def get_expected_sequence_number(self):\r\n        return self._expected_sequence_number\r\n\r\n    def get_timeout(self):\r\n        return self._timeout\r\n\r\n    def get_stmin(self):\r\n        return self._stmin\r\n\r\n    def set_stmin(self, stmin):\r\n        self._stmin = stmin\r\n\r\n    def set_state(self, state):\r\n        \"\"\"\r\n        Change the state of the recv_request.\r\n        \"\"\"\r\n        self._state = state\r\n        print(f\"State has been changed to {state.__class__.__name__}\")\r\n\r\n    def get_state(self):\r\n        return self._state.__class__.__name__\r\n\r\n    def set_address(self, address: Address):\r\n        self._address = address\r\n        print(f\"Address has been changed to {address}\")\r\n\r\n\r\n    def append_bits(self, bits: str):\r\n        \"\"\"\r\n        Append bits to the message.\r\n        \"\"\"\r\n        self._message.extend(bits)\r\n        print(f\"Bits appended: {bits}\")\r\n        print(f\"Current message: {self._message.to01()}\")\r\n\r\n\r\n    def update_last_received_time(self):\r\n        self._last_received_time = time.time()  # Update the last received time\r\n\r\n    def get_last_received_time(self):\r\n        return self._last_received_time\r\n\r\n\r\n    def check_stmin(self):\r\n        # True means you can proceed\r\n        # False means you have to wait\r\n        if self._stmin == 0:\r\n            return True\r\n\r\n        current_time = time.time()\r\n        elapsed_time_ms = (current_time - self._last_received_time) * 1000  # Convert seconds to milliseconds\r\n\r\n        return self._stmin <= elapsed_time_ms\r\n\r\n    def process(self, frameMessage: FrameMessage):\r\n        \"\"\"\r\n        Delegate processing to the current state.\r\n        The state will modify the recv_request as needed.\r\n        \"\"\"\r\n        current_time = time.time()\r\n        elapsed_time_ms = (current_time - self._last_received_time) * 1000  # Convert seconds to milliseconds\r\n\r\n        if 0 < self._timeout <= elapsed_time_ms:\r\n            #\r\n            # Some Logic !!\r\n            #\r\n            self.on_error(TimeoutException())\r\n\r\n        self._state.handle(self, frameMessage)\r\n
===================================================================
diff --git a/iso_tp_layer/recv_request/RecvRequest.py b/iso_tp_layer/recv_request/RecvRequest.py
--- a/iso_tp_layer/recv_request/RecvRequest.py	
+++ b/iso_tp_layer/recv_request/RecvRequest.py	
@@ -2,13 +2,13 @@
 from typing import Callable
 from bitarray import bitarray
 from iso_tp_layer.Exceptions import TimeoutException
+from InitialState import InitialState
 from iso_tp_layer.frames import FrameMessage
 from Address import Address
 import time
 from iso_tp_layer.frames.ErrorFrameMessage import ErrorFrameMessage
 from iso_tp_layer.frames.FlowControlFrameMessage import FlowControlFrameMessage
 from iso_tp_layer.frames.FlowStatus import FlowStatus
-from iso_tp_layer.recv_request.InitialState import InitialState
 
 
 class RecvRequest:
